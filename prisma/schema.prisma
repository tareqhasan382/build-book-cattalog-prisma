// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  admin
  customer
}

model Users {
  id              String            @id @default(uuid())
  name            String
  email           String            @unique
  password        String
  role            UserRole
  contactNo       String            @map("contact_no")
  address         String
  profileImg      String            @map("profile_img")
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  reviewAndRating ReviewAndRating[]

  Order Order[]

  @@map("users")
}

model Category {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  book Books[]

  @@map("categories")
}

model Books {
  id        String   @id @default(uuid())
  title     String
  author    String
  price     Float
  genre     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  categoryId String   @map("category_id")
  category   Category @relation(fields: [categoryId], references: [id])

  reviewAndRating ReviewAndRating[]

  @@map("books")
}

model ReviewAndRating {
  id        String   @id @default(uuid())
  review    String
  rating    Int // @validation(min: 1, max: 5) //// Validation: 1 (minimum) to 5 (maximum)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId String @map("user_id")
  user   Users  @relation(fields: [userId], references: [id])

  bookId String @map("book_id")
  book   Books  @relation(fields: [bookId], references: [id])

  @@map("reviews_and_ratings")
}

model Order {
  id           String   @id @default(uuid())
  orderedBooks Json     @map("ordered_books")
  status       String   @default("pending")
  createdAt    DateTime @default(now()) @map("created_at")

  userId String @map("user_id")
  user   Users  @relation(fields: [userId], references: [id])

  @@map("orders")
}

// model OrderedBook {
//   id String @id @default(uuid())

//   bookId

//   orderId

//   userId String @map("user_id")
//   user   Users  @relation(fields: [userId], references: [id])

//   @@map("order_books")
// }
